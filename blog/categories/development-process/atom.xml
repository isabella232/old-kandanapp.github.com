<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development Process | KandanApp]]></title>
  <link href="http://kandanapp.github.com/blog/categories/development-process/atom.xml" rel="self"/>
  <link href="http://kandanapp.github.com/"/>
  <updated>2013-03-08T10:32:42-08:00</updated>
  <id>http://kandanapp.github.com/</id>
  <author>
    <name><![CDATA[Kandan Crew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Contribute Code]]></title>
    <link href="http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-code/"/>
    <updated>2013-02-05T15:17:00-08:00</updated>
    <id>http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-code</id>
    <content type="html"><![CDATA[<div class="alert alert-info">
    <h4>Note: </h4>This is a living Document. The most recent copy is always available on the <a href="https://github.com/kandanapp/kandan/wiki/How-to-Contribute-Code">Wiki</a>
</div>


<h3>How To Contribute Code</h3>

<p>Whether you've got a bugfix, documentation update, or new feature for us, these are the steps to follow to contribute code back into the main kandan repo.</p>

<p><strong>1. Get the latest code from Github</strong></p>

<p>You'll need to understand a little bit about how git and gihub work before this step (if you need an introduction guide, Github <a href="http://learn.github.com/p/intro.html">has a good one</a> you can learn from). In simple terms, log in to github, visit the Kandan project page, and click the "fork" button to create your own copy of the repo.  You will push your changes to this new repo under your own github account, and we will pull changes into the main repo from there.</p>

<!-- more -->


<p>For the sake of the rest of the examples in this guide, we're going to assume your Github username is "<strong>GITHUB_USERNAME</strong>" and use that in our examples.</p>

<p>Now, we want to grab the latest from this newly created repository and pull it down to your local machine. Getting the latest code from your repo is simple, just clone it:</p>

<p><code>bash
git clone git://github.com/GITHUB_USERNAME/kandan.git
cd kandan
</code>
This will give you a directory called "kandan" on your local machine with the latest checkout from your fork of the main kandan repo. <strong>Note:</strong> this is <em>not</em> a direct reference to the main kandan repo. When you make changes in your fork, you'll need to let us know about it so we can pull it over....but that's later in the process.</p>

<p><strong>2. Add a remote for the main kandan repo</strong></p>

<p>One thing you'll need to do to make things easier to integrate and keep up to date in your fork is to add the main kandan repo as a remote reference. This way you can fetch the latest code from the production version and integrate it. So, here's how to set that up:</p>

<p><code>bash
git remote add upstream https://github.com/kandanapp/kandan.git
git remote   (this will list out your remotes, showing the new one we added)
</code></p>

<p>Then, when you need to pull the latest from the main kandan repo, you just fetch and merge the master branch:</p>

<p><code>bash
git fetch upstream
git merge upstream/master
</code></p>

<p>You can also use <em>git pull upstream master</em> if you want it all in one step.</p>

<p><strong>3. Making a branch for your changes</strong></p>

<p>When adding features or bug fixes, please create a separate branch for each changeset you want us to pull in, either with the issue number in the branch name or with an indication of what the feature is. To create the branch, do something like this:</p>

<p><code>bash
git branch   (lists your current branches)
git branch my_new_code   (makes a new branch called my_new_code)
git checkout my_new_code
</code></p>

<p>If you're working on an issue in the Issues list for the main kandan repo, use the naming convention "kandan-[issue-num]" for your branch name to help us keep track of what your patch actually fixes</p>

<p><strong>4. Push your code and make a pull request</strong></p>

<p>When you have finished making your changes, you'll need to push up your changes to your fork so we can grab them. With them all committed, push them:</p>

<p><code>bash
git push upstream kandan-[issue-num]
</code></p>

<p>This pushes everything in that branch up. Then you can go back over to the main kandan github page and issue a pull request from there.  Tell us what you want us to merge and what it does/fixes, and one of us will pick it up.</p>

<p>That lets us know that there's something new from you that needs to be pulled in. We'll review it and get back to you about it if we have any questions. Otherwise, we'll integrate it and let you know when it's in!</p>

<h3>Conclusion</h3>

<p>Hope this guide helps you get started in contributing to the kandan project! If you still have questions, don't hesitate to send an email over to admin@kandanapp.com and we'll get back to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Contribute Issues]]></title>
    <link href="http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-issues/"/>
    <updated>2013-02-05T14:07:00-08:00</updated>
    <id>http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-issues</id>
    <content type="html"><![CDATA[<div class="alert alert-info">
    <h4>Note: </h4>This is a living Document. The most recent copy is always available on the <a href="https://github.com/kandanapp/kandan/wiki/How-to-Contribute-Issues">Wiki</a>
</div>


<h3>Overview</h3>

<p>Spotting and reporting genuine issues in our platform is one of the most accessible ways to contribute but, in equal measure, also the most tricky to do well. If you use this guide as reference when you raise a ticket, it will reduce the chance of delays in it reaching our development team.</p>

<h3>Searching Issues</h3>

<p>Tickets for outstanding issues often contain workarounds shared by our development team, or links to threads that provide discussions and solutions between our community members. Otherwise, they will tell you when a fix for a issue was created and the build you need to obtain in order to take advantage of it.</p>

<!-- more -->


<p>It is not necessary to waste time debugging incorrect Kandan behavior that has either already been fixed or has a known workaround. Being familiar with GitHub's powerful issue search tool, will enable you to easily access this information.</p>

<h2>Submitting Issues</h2>

<h3>The Issue-Reporting Lifecycle</h3>

<p>We are keenly-committed to being as open to feedback from our community as possible, to ensure that the platform becomes more stable and featureful in the shortest time. It cannot be underestimated how crucial community-reported bugs are to achieving this goal. Hence, if you find a issue, and you are able to reproduce it reliably with a simple use case, then we will be very grateful if you would report it to us.</p>

<p>That said, the creation of tickets in the Issue Tracker should not be taken lightly. The management of each ticket can consume considerable resources, and so inaccurate or bogus submissions take unnecessary time away from what we would all prefer our development teams to be doing - improving the code.</p>

<p>In addition to accuracy, tickets that are concise, complete, unemotional and objective are the ones our teams appreciate the most.</p>

<h3>Issue Tracker Workflow Diagram</h3>

<p><img src="https://raw.github.com/kandanapp/kandan/resources/GH-Issue_Tracker.png" alt="GitHub Issue Tracker Workflow" /></p>

<h3>Creating a Use Case</h3>

<p>A "use case" is working code or reproduction scenario that reliably reproduces a specific issue. What sets the quality use cases apart from the rest is that they contain the least possible code while still demonstrating the issue. Take pride in your use case; make it an art!</p>

<p>Being in the habit of writing use cases as part of your troubleshooting process can significantly decrease the time we address your issue. This is because it can differentiate user errors from issues in the platform.</p>

<h3>Creating a Issue</h3>

<ul>
<li>Create a Issue, only after there is no doubt about the issue's existence, Create one ticket per issue, bearing the following in mind:

<ul>
<li>keep to the point: concise, complete and factual tickets are the most appreciated</li>
<li>include all the information: without a use case we probably cannot accept your issue</li>
<li>watch your issue</li>
</ul>
</li>
</ul>


<h3>Conclusion</h3>

<p>We do not underestimate the time and conscientiousness involved in raising good issues, and we very much appreciate it. Although we'd love to chat with you. Adding a ticket asking how to do XYZ probably isn't a good idea.</p>

<p>Thank you for all your efforts!</p>
]]></content>
  </entry>
  
</feed>
